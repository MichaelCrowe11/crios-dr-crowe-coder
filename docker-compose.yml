version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: crios-postgres
    environment:
      POSTGRES_USER: crios
      POSTGRES_PASSWORD: crios_secret_2025
      POSTGRES_DB: crios_discovery
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - crios-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crios"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crios-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crios-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./platform/backend
      dockerfile: Dockerfile
    container_name: crios-backend
    environment:
      DATABASE_URL: postgresql://crios:crios_secret_2025@postgres:5432/crios_discovery
      REDIS_URL: redis://redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PYTHONPATH: /app
      ENV: production
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crios-network
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload

  # Next.js Frontend
  frontend:
    build:
      context: ./platform/frontend
      dockerfile: Dockerfile
    container_name: crios-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
      NEXT_PUBLIC_WS_URL: ws://backend:8000
    volumes:
      - ./platform/frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - crios-network
    command: npm run dev

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./platform/backend
      dockerfile: Dockerfile
    container_name: crios-celery-worker
    environment:
      DATABASE_URL: postgresql://crios:crios_secret_2025@postgres:5432/crios_discovery
      REDIS_URL: redis://redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PYTHONPATH: /app
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - crios-network
    command: celery -A app.celery worker --loglevel=info

  # Flower - Celery Monitoring
  flower:
    build:
      context: ./platform/backend
      dockerfile: Dockerfile
    container_name: crios-flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - crios-network
    command: celery -A app.celery flower --port=5555

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crios-nginx
    volumes:
      - ./platform/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - crios-network

networks:
  crios-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: